* Features
:PROPERTIES:
:ID:       81757b05-87c8-44ab-b60e-c293732e5c0f
:ADDED:    [2016-08-05 Fri 14:46]
:END:

** Investigate configuration options in the Haskell community
:PROPERTIES:
:ID:       661136e3-bf85-49f2-abc5-d31c3ca7b72f
:ADDED:    [2016-08-05 Fri 14:48]
:END:
** Investigate other configuration tools from other languages (ruby, ocaml, rust)
:PROPERTIES:
:ID:       dfc31ff4-5d48-4dd8-8d5b-440ccdd119bc
:ADDED:    [2016-08-05 Fri 14:49]
:END:

** Allow configuration via ENV vars
:PROPERTIES:
:ID:       45311ce8-5104-486b-89a3-21c2eb584971
:ADDED:    [2016-08-05 Fri 14:46]
:END:
** Allow configuration via list of Files ordered by precedence (most important last)
:PROPERTIES:
:ID:       ce9a6a7f-829c-4ccb-a432-662cf557a62c
:ADDED:    [2016-08-05 Fri 14:47]
:END:
** Allow easy integration with optparse-applicative
:PROPERTIES:
:ID:       eeff1ebc-31ea-4e93-bca0-614896522f2f
:ADDED:    [2016-08-05 Fri 14:47]
:END:
** Have a way to get metadata from the configuration (where did the value came from)
:PROPERTIES:
:ID:       8304bfdd-b48d-4731-bb77-34fc68cff002
:ADDED:    [2016-08-05 Fri 14:49]
:END:
** Types prototype (Before investigation)
:PROPERTIES:
:ID:       e13c455c-8ef6-4c95-a3fa-03725b90cf75
:ADDED:    [2016-08-05 Fri 14:48]
:END:
#+BEGIN_SRC haskell
  module ConfigTool.Types where

  type ConfigKey = Text
  data ConfigSource
    = File     { index    :: Int
               , filename :: Text }
    | EnvVar   { varname :: Text }
    | OptParse { option  :: Text }

  newtype ConfigValue = ConfigValue (EDN.Value, ConfigSource)
  newtype ConfigValueSpec = ConfigValueSpec ConfigSource

  data UnresolvedConfigValue
    = Resolved ConfigValue
    | Spec ConfigValueSpec

  type UnresolvedConfig = HashMap ConfigKey UnresolvedConfigValue
  type Config = HashMap ConfigKey ConfigValue

  readConfigFile             :: FilePath -> IO UnresolvedConfig
  resolveEnvVarConfig        :: UnresolvedConfig -> IO (Either UnresolvedConfig Config)
  getConfigValue             :: (MonadThrow m, FromEDN a) => ConfigKey -> Config -> m a
  dumpConfig                 :: Config -> PrettyPrint.Builder

  -- implemeneted on an external library configtool-optparse-applicative
  unresolvedConfigToOptParse :: UnresolvedConfig -> OptParser Config

  -- Precedence order
  -- 1) optparse options
  -- 2) env-var options
  -- 3) file options
  -- if different files, the one with the greater index wins
  instance Monoid Config
#+END_SRC
