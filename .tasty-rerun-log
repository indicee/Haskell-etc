fromList [(["etc","cli","command","fails when command not given"],Completed True),(["etc","cli","command","when command given","argument input","entry gets validated with a type"],Completed True),(["etc","cli","command","when command given","argument input","entry with required fails when argument not given"],Completed True),(["etc","cli","command","when command given","argument input","entry with required false does not barf"],Completed True),(["etc","cli","command","when command given","argument input","supports same cli input on multiple arguments"],Completed True),(["etc","cli","command","when command given","option input","entry accepts long"],Completed True),(["etc","cli","command","when command given","option input","entry accepts short"],Completed True),(["etc","cli","command","when command given","option input","entry gets validated with a type"],Completed True),(["etc","cli","command","when command given","option input","entry with required fails when option not given"],Completed True),(["etc","cli","command","when command given","option input","entry with required false does not barf"],Completed True),(["etc","cli","plain","argument input","entry gets validated with a type"],Completed True),(["etc","cli","plain","argument input","entry with required fails when argument not given"],Completed True),(["etc","cli","plain","argument input","entry with required false does not barf"],Completed True),(["etc","cli","plain","option input","entry accepts long"],Completed True),(["etc","cli","plain","option input","entry accepts short"],Completed True),(["etc","cli","plain","option input","entry gets validated with a type"],Completed True),(["etc","cli","plain","option input","entry with required fails when option not given"],Completed True),(["etc","cli","plain","option input","entry with required false does not barf"],Completed True),(["etc","default","default can be raw JSON value on entries spec"],Completed True),(["etc","default","default is used when defined on spec"],Completed True),(["etc","env","does not add entries to config if env var is not present"],Completed True),(["etc","env","env entry is present when env var is defined"],Completed True),(["etc","env","has precedence over default and file values"],Completed True),(["etc","file","does not fail if file doesn't exist"],Completed True),(["etc","file","does not support any other file extension"],Completed True),(["etc","file","supports json, yaml and yml extensions"],Completed True),(["etc","spec","cli","cli entry accepts command"],Completed True),(["etc","spec","cli","cli entry does not accept unrecognized keys"],Completed True),(["etc","spec","cli","cli entry settings requires an input"],Completed True),(["etc","spec","cli","cli option entry requires either short or long"],Completed True),(["etc","spec","cli","cli option entry works when setting long and type"],Completed True),(["etc","spec","cli","cli option entry works when setting short and type"],Completed True),(["etc","spec","env","env key creates an ENV source"],Completed True),(["etc","spec","general","does not fail when etc/entries is not defined"],Completed True),(["etc","spec","general","entries can have many levels of nesting"],Completed True),(["etc","spec","general","entries cannot finish in an array"],Completed True),(["etc","spec","general","entries cannot finish in an empty map"],Completed True),(["etc","spec","general","entries that finish with raw values sets them as default value"],Completed True),(["etc","spec","general","spec map cannot be a JSON array"],Completed True),(["etc","spec","general","spec map cannot be a JSON bool"],Completed True),(["etc","spec","general","spec map cannot be a JSON number"],Completed True),(["etc","spec","general","spec map cannot be a JSON string"],Completed True),(["etc","spec","general","spec map cannot be empty object"],Completed True),(["etc","spec","general","spec map cannot have any other key that is not etc/spec"],Completed True),(["etc","spec","yaml parser","should work with Aeson instances"],Completed True)]